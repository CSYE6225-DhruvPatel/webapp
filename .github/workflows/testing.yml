name: Run Tests

on: 
  workflow_dispatch:
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Environment Variables
      run: |
        touch .env
        echo "HOST=${{ secrets.HOST }}" >> .env
        echo "DBNAME=${{ secrets.DBNAME }}" >> .env
        echo "USERNAME=${{ secrets.USERNAME }}" >> .env
        echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env
    
    - name: Create Repository Zip with .env
      run: zip -r webapp.zip .env *

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: 'Use gcloud CLI'
      run: 'gcloud info'

    - name: 'Setup Packer Gcloud Plugin'
      run: 'packer plugins install github.com/hashicorp/googlecompute'
    
    - name: Packer Init
      run: packer init ./packer/gcp.pkr.hcl

    # - name: Build Packer Image
    #   run: |
    #     OUTPUT=$(packer build -var 'project_id='${{ secrets.GCP_PROJECT_NAME }} packer/gcp.pkr.hcl)
    #       IMAGE_ID=$(echo "$OUTPUT" | sed -n 's/.*: \(packer-[0-9]*\)/\1/p')
    #       echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

    - name: Build Packer Image
      run: |
          echo "IMAGE_ID=packer-1712176956" >> $GITHUB_ENV
    
    - name: Generate Random Name
      run: |
        RANDOM_NAME=$(uuidgen | tr -d '-' | cut -c1-6)
        echo "Generated random name: $RANDOM_NAME"
        echo "RANDOM_NAME=$RANDOM_NAME" >> $GITHUB_ENV
        
        

    - name: Update Instance Template
      run: |
          gcloud compute instance-templates create new-webapp-template-${{env.RANDOM_NAME}} \
          --machine-type=e2-standard-2 \
          --image=${{env.IMAGE_ID}} \
          --region=us-east4 \
          --network=vpc1 \
          --subnet=webapp \
          --metadata USERNAME=${{env.db_username}},PASSWORD=${{env.db_password}},DBNAME=${{env.db_name}},DBHOST=${{env.db_host}},MAILGUN_API_KEY=${{env.MAILGUN_API_KEY}},GCP_PROJECT=${{env.GCP_PROJECT}},PUBSUB_TOPIC=${{env.PUBSUB_TOPIC}} \
          --metadata-from-file=startup-script=packer/postgres.sh \
          --service-account=newuser@devgcp-415101.iam.gserviceaccount.com \
          --scopes=cloud-platform \
          --tags=webapp
      
    - name: Update Managed Instance Group
      run: |
          # Assuming the instance group name is consistent and does not need to be randomized
          gcloud compute instance-groups managed set-instance-template webapp-igm --template=new-webapp-template-${{env.RANDOM_NAME}} --zone=us-east4-a
      
    - name: Start Rolling Update
      run: |
          gcloud compute instance-groups managed rolling-action start-update web-igm \
          --version=template=new-webapp-template-${{env.RANDOM_NAME}} \
          --zone=us-east4-a
         
    
    - name: Wait for Instance Group Update to Complete
      run: |
        # Use gcloud CLI to check the status of the instance group update
        status=$(gcloud compute instance-groups managed describe webapp-igm --zone=us-east4-a --format='value(status)')
        timeout=600 # 10 minutes.
        elapsed=0
        while [[ "$status" != "UPDATE_STATE_NONE" && "$status" != "UPDATE_STATE_ERROR" ]]; do
          sleep 60
          elapsed=$((elapsed + 60))
          if [ $elapsed -ge $timeout ]; then
            echo "Update timed out, treating as cancelled."
            exit 1
          fi
          status=$(gcloud compute instance-groups managed describe webapp-igm --zone=us-east4-a --format='value(status)')
        done

        # Exit with an error if the instance group update failed
        if [ "$status" == "UPDATE_STATE_ERROR" ]; then
          exit 1
        fi
    
    # runs-on: ubuntu-latest

    # steps:
    # - name: Checkout Repository
    #   uses: actions/checkout@v2

    # - name: Install PostgreSQL
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install postgresql postgresql-contrib -y

    # - name: Start PostgreSQL Service
    #   run: sudo service postgresql start

    # - name: Verify PostgreSQL Service
    #   run: sudo service postgresql status

    # - name: Change PostgreSQL Password
    #   run: |
    #     sudo -u postgres psql -c "ALTER ROLE ${{ secrets.USERNAME }} WITH PASSWORD '${{ secrets.PASSWORD }}';"

    # - name: Create Database
    #   run: sudo -u ${{ secrets.USERNAME }} psql -c 'CREATE DATABASE ${{ secrets.DBNAME }};'

    # - name: "create environment varible"
    #   run: |
    #     touch .env
    #     echo DBNAME=${{ secrets.DBNAME}} >> .env
    #     echo USERNAME=${{ secrets.USERNAME }} >> .env
    #     echo PASSWORD=${{ secrets.PASSWORD }} >> .env
    #     echo DBHOST=${{ secrets.DBHOST }} >> .env

    # - name: Set up Node.js
    #   uses: actions/setup-node@v2
    #   with:
    #     node-version: '18'

    # - name: Install Dependencies
    #   run: npm install
    
    # - name: Create webapp For log
    #   run: | 
    #     sudo mkdir -p /var/log/webapp
    #     sudo chmod -R 777 /var/log/webapp

    # - name: Run Tests
    #   run: npm test
